/*---4.3---*/

#include "student.h"
#include "grade.h"

#include <iostream>
#include <string>
#include <iomanip>
#include <vector>	
#include <algorithm>
#include <stdexcept>

using std::cout;	using std::endl;		using std::cin;		using std::streamsize;		//iostream
using std::string;									//string
using std::setprecision;	using std::setw;		//iomanip
using std::vector;									//vector
using std::sort;			using std::max;			//algorithm
using std::domain_error;							//stdexcept




int main()
{
	vector<Student> students;
	Student stu;
	string::size_type maxNameLen = 0;

	while (readStudent(cin, stu))
	{
		maxNameLen = max(maxNameLen, stu.name.size());
		students.push_back(stu);
	}
	maxNameLen += 1;

	sort(students.begin(), students.end(), comprStudent);


	for (vector<Student>::size_type i = 0; i != students.size(); i++)
	{
		try
		{
			cout <<setw(maxNameLen)<< students[i].name << ":";
			double grd = grade(students[i]);
			streamsize prec = cout.precision();
			cout << setprecision(3) << grd << setprecision(prec) << endl;
		}
		catch (domain_error e)
		{
			cout << students[i].name << " "<<e.what() << endl;
			return 1;
		}
		cout << endl;
	}
	
	return 0;
}



/*---grade.h---*/

#pragma once
#ifndef grade_h
#define grade_h

#include <vector>
#include "student.h"

double grade(double, double, double);
double grade(double, double, const std::vector<double>&);
double grade(const Student&);

#endif // !grade_h



/*---grade.cpp---*/

#include "student.h"	
#include "median.h"
#include <vector>
#include <stdexcept>

using std::vector;
using std::domain_error;

double grade(double mid, double fin, double homework)
{
	return 0.2*mid + 0.4*fin + 0.4*homework;
}

double grade(double mid, double fin, const vector<double>& homework)
{
	if (homework.size() == 0)
		throw domain_error("homework empty");
	return grade(mid, fin, median(homework));
}

double grade(const Student& stu)
{
	return grade(stu.mid, stu.fin, stu.homeworks);
}




/*---median.h---*/

#pragma once
#ifndef median_h
#define median_h

#include <vector>

double median(std::vector<double>);
#endif // !median_h



/*---median.cpp---*/


#include <stdexcept>
#include <algorithm>

#include "median.h"

using std::vector;
using std::domain_error;
using std::sort;

double median(vector<double> vec)
{
	typedef vector<double>::size_type vdsztp;
	vdsztp sz = vec.size();
	if (sz == 0)
	{
		throw domain_error("vector empty");
	}
	sort(vec.begin(), vec.end());

	vdsztp md = sz / 2;
	return (sz % 2 == 0) ? (vec[md] + vec[md - 1]) / 2 : vec[md];
}




/*---student.h---*/

#pragma once
#ifndef student_h
#define student_h

#include <string>
#include <vector>
#include <iostream>

struct Student
{
	std::string name;
	double mid, fin;
	std::vector<double> homeworks;
};

std::istream& readHomeworks(std::istream&,std::vector<double>&);
std::istream& readStudent(std::istream&,Student&);
bool comprStudent(const Student&, const Student&);

#endif // !student_h




/*---student.cpp---*/
#include "student.h"
using std::istream;
using std::vector;

bool comprStudent(const Student& a, const Student& b)
{
	return a.name < b.name;
}


istream& readHomeworks(istream& in, vector<double>& homeworks)
{
	if (in)
	{
		homeworks.clear();
		double x;
		while (in>>x)
		{
			homeworks.push_back(x);
		}
		in.clear();
	}
	return in;
}

istream& readStudent(istream& in, Student& student)
{
	in >> student.name >> student.mid >> student.fin;
	readHomeworks(in, student.homeworks);

	return in;

}

