/*---4.2---*/

#include <iostream>
#include <string>
#include <iomanip>
#include <vector>	
#include <algorithm>
#include <stdexcept>

using std::cout;	using std::endl;		using std::cin;		using std::streamsize;		using std::istream;//iostream
using std::string;			//string
using std::setprecision;	using std::setw;//iomanip
using std::vector;			//vector
using std::sort;			using std::max;//algorithm
using std::domain_error;	//stdexcept

struct Student
{
	string name;
	double mid, fin;
	vector<double> homeworks;
};


double median(vector<double> vec)
{	
	typedef vector<double>::size_type vdsztp;
	vdsztp sz = vec.size();
	if (sz == 0)
	{
		throw domain_error("vector empty");
	}	
	vdsztp	mid = sz/2;

	sort(vec.begin(), vec.end());
	return (sz % 2 == 0) ? (vec[mid] + vec[mid - 1]) / 2 : vec[mid];
}


double grade(double mid, double fin, double homeworks)
{
	return 0.2*mid + 0.4*fin + 0.4*homeworks;
}

double grade(double mid, double fin, const vector<double>& homeworks)
{
	if (homeworks.size() == 0)
	{
		throw domain_error("homework empty");
	}
	return grade(mid, fin, median(homeworks));
}

double grade(const Student& stu)
{
	return grade(stu.mid, stu.fin, stu.homeworks);
}

istream& readHomeworks(istream& in, vector<double>& homeworks)
{
	if (in)
	{
		double x;
		homeworks.clear();
		while (in >> x)
		{
			homeworks.push_back(x);
		}
		in.clear();
	}
	return in;
}

istream& readStudent(istream& in, Student& stu)
{
	in >> stu.name >> stu.mid >> stu.fin;
	readHomeworks(in, stu.homeworks);
	return in;
}

bool comprStudent(const Student& a, const Student& b)
{
	return a.name < b.name;
}

int main()
{
	vector<Student> students;
	Student stu;
	string::size_type maxNameLen = 0;

	while (readStudent(cin, stu))
	{
		maxNameLen = max(maxNameLen, stu.name.size());
		students.push_back(stu);
	}
	maxNameLen += 1;

	sort(students.begin(), students.end(), comprStudent);


	for (vector<Student>::size_type i = 0; i != students.size(); i++)
	{
		try
		{
			cout <<setw(maxNameLen)<< students[i].name << ":";
			double grd = grade(students[i]);
			streamsize prec = cout.precision();
			cout << setprecision(3) << grd << setprecision(prec) << endl;
		}
		catch (domain_error e)
		{
			cout << students[i].name << " "<<e.what() << endl;
			return 1;
		}
		cout << endl;
	}
	
	return 0;
}
